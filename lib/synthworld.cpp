/*
 * synthworld.cpp
 *
 *  Created on: 06.08.2018
 *      Author: Michael Pucher
 */
#ifndef SYNTHWORLD_C
#define SYNTHWORLD_C

#ifdef __cplusplus
#define SYNTHWORLD_C_START extern "C" {
#define SYNTHWORLD_C_END   }
#else
#define SYNTHWORLD_C_START
#define SYNTHWORLD_C_END
#endif

#define MIN(a,b) ((a)<(b))?(a):(b)

SYNTHWORLD_C_START;

#include "synthworld.h"
#include "world/d4c.h"
#include "world/dio.h"
#include "world/matlabfunctions.h"
#include "world/cheaptrick.h"
#include "world/stonemask.h"
#include "world/synthesis.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "HTS_hidden.h"
#include "SPTKfunctions.h"
#include <stdint.h>
#include <string.h>

WorldParameters world_parameters = { 0 };
double baseap[] = {0.0010000000474974513, 0.0010356908896937966, 0.0010726556647568941, 0.0011109397746622562, 0.001150590251199901, 0.0011916558723896742, 0.0012341871624812484, 0.0012782365083694458, 0.0013238579267635942, 0.0013711076462641358, 0.0014200437581166625, 0.0014707264490425587, 0.0015232180012390018, 0.0015775830252096057, 0.001633888459764421, 0.0016922034556046128, 0.0017525998409837484, 0.0018151516560465097, 0.0018799362005665898, 0.0019470328697934747, 0.0020165243186056614, 0.0020884957630187273, 0.00216303626075387, 0.002240237081423402, 0.0023201932199299335, 0.002403002930805087, 0.0024887684267014265, 0.0025775947142392397, 0.0026695914566516876, 0.002764871809631586, 0.0028635526541620493, 0.0029657555278390646, 0.0030716059263795614, 0.0031812344677746296, 0.003294775728136301, 0.003412369405850768, 0.003534159855917096, 0.0036602974869310856, 0.0037909368984401226, 0.003926238976418972, 0.004066369961947203, 0.004211502615362406, 0.004361814819276333, 0.004517491906881332, 0.004678725730627775, 0.00484571373090148, 0.005018661729991436, 0.005197782535105944, 0.005383295938372612, 0.005575431045144796, 0.005774423014372587, 0.005980517715215683, 0.006193968001753092, 0.006415036506950855, 0.006643995177000761, 0.006881125271320343, 0.0071267192251980305, 0.0073810783214867115, 0.007644515950232744, 0.007917355746030807, 0.008199933916330338, 0.008492596447467804, 0.008795705623924732, 0.00910963211208582, 0.009434763342142105, 0.0097714988514781, 0.010120253078639507, 0.01048145443201065, 0.010855547152459621, 0.01124299131333828, 0.011644264683127403, 0.012059859000146389, 0.012490286491811275, 0.012936076149344444, 0.013397776521742344, 0.01387595571577549, 0.014371201395988464, 0.01488412357866764, 0.015415351837873459, 0.0159655399620533, 0.016535364091396332, 0.017125526443123817, 0.017736753448843956, 0.01836979389190674, 0.019025428220629692, 0.019704464823007584, 0.02040773443877697, 0.021136106923222542, 0.02189047262072563, 0.022671764716506004, 0.023480940610170364, 0.02431899681687355, 0.025186965242028236, 0.026085911318659782, 0.02701694145798683, 0.02798120118677616, 0.02897987700998783, 0.030014194548130035, 0.031085429713129997, 0.032194897532463074, 0.03334396332502365, 0.034534040838479996, 0.035766590386629105, 0.03704313561320305, 0.038365237414836884, 0.039734531193971634, 0.04115269333124161, 0.04262147098779678, 0.044142670929431915, 0.04571816325187683, 0.04734988510608673, 0.049039848148822784, 0.050790123641490936, 0.052602872252464294, 0.05448031798005104, 0.05642477050423622, 0.05843862146139145, 0.0605243518948555, 0.06268452107906342, 0.0649217888712883, 0.06723891198635101, 0.06963872909545898, 0.07212419807910919, 0.07469838112592697, 0.07736442983150482, 0.08012564480304718, 0.08298540115356445, 0.08594722300767899, 0.08901476114988327, 0.08962825685739517, 0.09024597704410553, 0.09086795896291733, 0.09149422496557236, 0.0921248123049736, 0.09275974333286285, 0.0933990478515625, 0.09404275566339493, 0.09469090402126312, 0.09534352272748947, 0.09600063413381577, 0.09666227549314499, 0.09732847660779953, 0.09799926728010178, 0.09867468476295471, 0.09935475885868073, 0.1000395193696022, 0.10072899609804153, 0.1014232262969017, 0.1021222397685051, 0.1028260737657547, 0.1035347580909729, 0.10424832254648209, 0.10496681183576584, 0.10569024831056595, 0.1064186692237854, 0.10715211182832718, 0.10789061337709427, 0.10863419622182846, 0.10938291251659393, 0.11013678461313248, 0.11089585721492767, 0.11166015267372131, 0.11242972314357758, 0.11320459842681885, 0.11398480832576752, 0.11477039754390717, 0.11556140333414078, 0.11635785549879074, 0.11715979874134064, 0.11796727776527405, 0.11878031492233276, 0.11959895491600037, 0.12042323499917984, 0.12125319987535477, 0.12208887934684753, 0.12293032556772232, 0.12377756834030151, 0.1246306523680687, 0.12548960745334625, 0.12635450065135956, 0.1272253394126892, 0.12810218334197998, 0.12898506224155426, 0.12987403571605682, 0.13076913356781006, 0.13167041540145874, 0.13257788121700287, 0.1334916204214096, 0.13441164791584015, 0.13533802330493927, 0.13627079129219055, 0.1372099667787552, 0.13815562427043915, 0.139107808470726, 0.14006654918193817, 0.1410318911075592, 0.1420038938522339, 0.1429825872182846, 0.14396803081035614, 0.14496026933193207, 0.14595934748649597, 0.14696530997753143, 0.14797820150852203, 0.14899806678295135, 0.15002498030662537, 0.15105895698070526, 0.15210005640983582, 0.1531483381986618, 0.1542038470506668, 0.1552666276693344, 0.1563367396593094, 0.15741422772407532, 0.15849913656711578, 0.15959151089191437, 0.16069142520427704, 0.16179892420768738, 0.16291405260562897, 0.16403687000274658, 0.1651674211025238, 0.1663057655096054, 0.16745194792747498, 0.16860602796077728, 0.1697680801153183, 0.1709381341934204, 0.1721162497997284, 0.17330248653888702, 0.17449688911437988, 0.17569953203201294, 0.17691045999526978, 0.17812974750995636, 0.17935742437839508, 0.1805935651063919, 0.1818382292985916, 0.18309146165847778, 0.18435333669185638, 0.1856239140033722, 0.1869032382965088, 0.18819139897823334, 0.18948841094970703, 0.19079437851905823, 0.1921093463897705, 0.19343337416648865, 0.19476653635501862, 0.196108877658844, 0.19746047258377075, 0.19882138073444366, 0.2001916617155075, 0.20157139003276825, 0.20296064019203186, 0.20435945689678192, 0.2057679146528244, 0.20718607306480408, 0.20861400663852692, 0.2100517898797989, 0.21149948239326477, 0.21295714378356934, 0.21442486345767975, 0.21490852534770966, 0.2153932899236679, 0.2158791422843933, 0.21636609733104706, 0.21685414016246796, 0.2173433005809784, 0.21783354878425598, 0.2183249145746231, 0.21881738305091858, 0.2193109542131424, 0.21980564296245575, 0.22030144929885864, 0.22079838812351227, 0.22129642963409424, 0.22179560363292694, 0.22229589521884918, 0.22279731929302216, 0.22329987585544586, 0.2238035649061203, 0.22430838644504547, 0.22481435537338257, 0.2253214567899704, 0.22582970559597015, 0.22633910179138184, 0.22684964537620544, 0.22736135125160217, 0.22787420451641083, 0.2283882051706314, 0.2289033681154251, 0.22941970825195312, 0.22993719577789307, 0.23045586049556732, 0.2309756875038147, 0.2314966917037964, 0.2320188730955124, 0.2325422316789627, 0.23306676745414734, 0.23359248042106628, 0.23411938548088074, 0.2346474826335907, 0.23517677187919617, 0.23570725321769714, 0.23623892664909363, 0.23677180707454681, 0.2373058795928955, 0.2378411591053009, 0.238377645611763, 0.238915354013443, 0.2394542694091797, 0.23999439179897308, 0.24053573608398438, 0.24107830226421356, 0.24162210524082184, 0.24216711521148682, 0.24271336197853088, 0.24326084554195404, 0.2438095659017563, 0.24435950815677643, 0.24491070210933685, 0.24546314775943756, 0.24601683020591736, 0.24657174944877625, 0.2471279352903366, 0.24768537282943726, 0.24824407696723938, 0.2488040328025818, 0.24936524033546448, 0.24992772936820984, 0.2504914700984955, 0.2510564923286438, 0.2516227960586548, 0.25219038128852844, 0.25275924801826477, 0.2533293664455414, 0.25390079617500305, 0.2544735074043274, 0.2550475299358368, 0.25562283396720886, 0.2561994194984436, 0.2567773163318634, 0.25735652446746826, 0.2579370439052582, 0.25851887464523315, 0.2591019868850708, 0.2596864402294159, 0.26027220487594604, 0.26085928082466125, 0.2614476978778839, 0.2620374262332916, 0.2626284956932068, 0.2632209062576294, 0.26381465792655945, 0.26440972089767456, 0.2650061547756195, 0.2656038999557495, 0.26620301604270935, 0.26680347323417664, 0.26740530133247375, 0.2680084705352783, 0.2686130106449127, 0.26921892166137695, 0.26982617378234863, 0.27043482661247253, 0.2710448205471039, 0.27165621519088745, 0.27226898074150085, 0.2728831470012665, 0.27349865436553955, 0.27411559224128723, 0.27473390102386475, 0.2753536105155945, 0.27597472071647644, 0.2765972316265106, 0.277221143245697, 0.27784645557403564, 0.2784731686115265, 0.27910131216049194, 0.279730886220932, 0.2803618609905243, 0.2809942662715912, 0.2816280722618103, 0.2822633385658264, 0.28290003538131714, 0.28353816270828247, 0.2841777205467224, 0.28481873869895935, 0.2854611873626709, 0.28610509634017944, 0.2878454923629761, 0.2895964980125427, 0.2913581430912018, 0.293130487203598, 0.2949136197566986, 0.2967076301574707, 0.2985125184059143, 0.30032840371131897, 0.3021553158760071, 0.3039933741092682, 0.3058425784111023, 0.30770304799079895, 0.30957484245300293, 0.311458021402359, 0.31335264444351196, 0.31525880098342896, 0.31717655062675476, 0.31910595297813416, 0.3210470974445343, 0.32300007343292236, 0.3249649107456207, 0.32694169878959656, 0.328930526971817, 0.3309314250946045, 0.33294451236724854, 0.3349698483943939, 0.3370074927806854, 0.3390575349330902, 0.34112006425857544, 0.3431951403617859, 0.34528282284736633, 0.34738320112228394, 0.34949636459350586, 0.35162240266799927, 0.35376134514808655, 0.35591331124305725, 0.35807836055755615, 0.3602565824985504, 0.3624480664730072, 0.3646528720855713, 0.36687108874320984, 0.36910280585289, 0.3713480830192566, 0.37360700964927673, 0.37587970495224, 0.37816622853279114, 0.38046663999557495, 0.382781058549881, 0.385109543800354, 0.38745221495628357, 0.38980910181999207, 0.39218035340309143, 0.39456602931022644, 0.39696621894836426, 0.39938098192214966, 0.4018104672431946, 0.4042547047138214, 0.4067138433456421, 0.409187912940979, 0.4116770327091217, 0.41418132185935974, 0.4167008101940155, 0.4192356467247009, 0.4217858910560608, 0.42435166239738464, 0.42693302035331726, 0.4295300841331482, 0.432142972946167, 0.43477174639701843, 0.4374164938926697, 0.4400773346424103, 0.4427543580532074, 0.4454476833343506, 0.4481573700904846, 0.45088356733322144, 0.4536263346672058, 0.4563857913017273, 0.45916202664375305, 0.46195515990257263, 0.4647652506828308, 0.4675924777984619, 0.47043687105178833, 0.473298579454422, 0.47617772221565247, 0.4790743589401245, 0.4819886088371277, 0.48492059111595154, 0.48787039518356323, 0.4908381700515747, 0.49382397532463074, 0.49682796001434326, 0.49985021352767944, 0.5028908252716064, 0.5059499740600586, 0.5090277194976807, 0.5121241807937622, 0.5152394771575928, 0.5183737277984619, 0.5215270519256592, 0.5246995091438293, 0.5278913378715515, 0.5311025381088257, 0.5343332886695862, 0.5375837087631226, 0.5408538579940796, 0.5441439151763916, 0.5474539995193481, 0.5507842302322388, 0.5541346669197083, 0.5575055480003357, 0.5608968734741211, 0.5643088817596436, 0.5677416324615479, 0.5711952447891235, 0.5746698975563049, 0.5781656503677368, 0.5816826820373535, 0.5852211117744446, 0.5887810587882996, 0.5923627018928528, 0.595966100692749, 0.5995913743972778, 0.6032387614250183, 0.6069083213806152, 0.6106002330780029, 0.6143145561218262, 0.6180514693260193, 0.6218111515045166, 0.6157528758049011, 0.6097536087036133, 0.6038128733634949, 0.5979299545288086, 0.5921043157577515, 0.5863355398178101, 0.5806229114532471, 0.5749658942222595, 0.569364070892334, 0.5638167858123779, 0.5583235621452332, 0.5528838634490967, 0.5474971532821655, 0.5421628952026367, 0.5368806719779968, 0.5316498279571533, 0.5264700055122375, 0.5213406682014465, 0.5162612795829773, 0.5112313628196716, 0.5062505006790161, 0.501318097114563, 0.4964337944984436, 0.49159708619117737, 0.4868074953556061, 0.48206454515457153, 0.4773678183555603, 0.4727168679237366, 0.46811121702194214, 0.4635504484176636, 0.45903411507606506, 0.4545617699623108, 0.45013299584388733, 0.44574737548828125, 0.4414044916629791, 0.43710392713546753, 0.43284523487091064, 0.4286280572414398, 0.4244519770145416, 0.42031654715538025, 0.4162214398384094, 0.4121662378311157, 0.4081505239009857, 0.40417394042015076, 0.4002360999584198, 0.3963366150856018, 0.3924751281738281, 0.3886512815952301, 0.3848646879196167, 0.3811149597167969, 0.37740179896354675, 0.3737247884273529, 0.37008360028266907, 0.366477906703949, 0.362907350063324, 0.3593715727329254, 0.35587021708488464, 0.35240301489830017, 0.34896957874298096, 0.34556958079338074, 0.34220272302627563, 0.338868647813797, 0.33556708693504333, 0.332297682762146, 0.3290601074695587, 0.3258541226387024, 0.322679340839386, 0.319535493850708, 0.3164222836494446, 0.3133394122123718, 0.3102865517139435, 0.30726346373558044, 0.30426979064941406, 0.3013053238391876, 0.29836973547935486, 0.2954627275466919, 0.29258406162261963, 0.2897334396839142, 0.2869105637073517, 0.2841152250766754, 0.2813470959663391, 0.27860596776008606, 0.27589151263237, 0.2732035219669342, 0.2705417275428772, 0.2679058611392975, 0.2652956545352936, 0.26271089911460876, 0.26015132665634155, 0.25761669874191284, 0.25510674715042114, 0.25262126326560974, 0.25015997886657715, 0.24772270023822784, 0.24530915915966034, 0.24291911721229553, 0.2405523806810379, 0.23820869624614716, 0.23588784039020538, 0.23358960449695587, 0.23131375014781952, 0.2290600836277008, 0.22682836651802063, 0.22461839020252228, 0.22242994606494904, 0.2202628254890442, 0.21811681985855103, 0.21599172055721283, 0.21388733386993408, 0.21180343627929688, 0.20973984897136688, 0.20769637823104858, 0.20567280054092407, 0.20366893708705902, 0.2016846090555191, 0.1997196078300476, 0.1977737545967102, 0.19584685564041138, 0.1939387321472168, 0.19204920530319214, 0.19017808139324188, 0.1883251816034317, 0.18649034202098846, 0.18467338383197784, 0.18287412822246552, 0.18109239637851715, 0.17932802438735962, 0.1775808483362198, 0.17838190495967865, 0.1791865974664688, 0.17999489605426788, 0.18080686032772064, 0.1816224753856659, 0.18244177103042603, 0.18326477706432343, 0.1840914785861969, 0.18492192029953003, 0.18575610220432281, 0.18659405410289764, 0.18743577599525452, 0.18828129768371582, 0.18913063406944275, 0.1899838000535965, 0.19084082543849945, 0.19170169532299042, 0.19256646931171417, 0.19343513250350952, 0.19430772960186005, 0.19518424570560455, 0.19606472551822662, 0.19694916903972626, 0.19783760607242584, 0.19873005151748657, 0.19962652027606964, 0.20052704215049744, 0.20143161714076996, 0.2023402750492096, 0.20325303077697754, 0.20416991412639618, 0.20509092509746552, 0.20601609349250793, 0.20694541931152344, 0.2078789621591568, 0.20881669223308563, 0.2097586691379547, 0.21070489287376404, 0.2116553783416748, 0.2126101553440094, 0.21356923878192902, 0.21453265845775604, 0.21550041437149048, 0.2164725363254547, 0.21744903922080994, 0.21842995285987854, 0.21941529214382172, 0.22040507197380066, 0.22139932215213776, 0.2223980575799942, 0.2234012931585312, 0.2244090586900711, 0.22542136907577515, 0.2264382392168045, 0.22745971381664276, 0.22848577797412872, 0.22951647639274597, 0.2305518239736557, 0.2315918505191803, 0.23263655602931976, 0.23368598520755768, 0.23474013805389404, 0.23579905927181244, 0.23686274886131287, 0.2379312366247177, 0.23900453746318817, 0.24008269608020782, 0.24116571247577667, 0.2422536015510559, 0.2433464080095291, 0.24444414675235748, 0.2455468326807022, 0.24665449559688568, 0.2477671504020691, 0.24888482689857483, 0.2500075399875641, 0.25113534927368164, 0.2522681951522827, 0.25340619683265686, 0.2545492947101593, 0.2556975781917572, 0.25685104727745056, 0.2580097019672394, 0.25917357206344604, 0.26034271717071533, 0.26151710748672485, 0.2626968026161194, 0.2638818323612213, 0.26507219672203064, 0.26626795530319214, 0.2674690783023834, 0.26867565512657166, 0.26988762617111206, 0.2711051106452942, 0.27232804894447327, 0.27355653047561646, 0.27479055523872375, 0.27603012323379517, 0.27727529406547546, 0.27852609753608704, 0.2797825038433075, 0.281044602394104, 0.28231239318847656, 0.28358590602874756, 0.2848651707172394, 0.2861502170562744, 0.2874410152435303, 0.2887376844882965, 0.29004016518592834, 0.29134854674339294, 0.2926628291606903, 0.29398301243782043, 0.2953091859817505, 0.2966413199901581, 0.297979474067688, 0.2993236482143402, 0.3006739020347595, 0.3020302355289459, 0.3033927083015442, 0.3047613203525543, 0.3061360716819763, 0.30751705169677734, 0.3089042603969574, 0.31029775738716125, 0.31169748306274414, 0.3131035566329956, 0.31451597809791565, 0.3159347474575043, 0.31735995411872864, 0.31879153847694397, 0.3202296197414398, 0.3216741681098938, 0.3231252431869507, 0.32458287477493286, 0.32604706287384033, 0.32751786708831787, 0.3289952874183655, 0.33047938346862793, 0.3319701850414276, 0.3334676921367645, 0.33497196435928345, 0.33648303151130676, 0.33800092339515686, 0.33952564001083374, 0.3410572409629822, 0.34259575605392456, 0.3441411852836609, 0.3456936180591583, 0.34725305438041687, 0.3488194942474365, 0.35039302706718445, 0.35197365283966064, 0.3535614013671875, 0.3551563322544098, 0.3567584156990051, 0.35836777091026306, 0.3599843680858612, 0.36160826683044434, 0.36323946714401245, 0.3648780584335327, 0.36652401089668274, 0.3681774139404297, 0.36983823776245117, 0.37150660157203674, 0.3731824457645416, 0.37486588954925537, 0.3765569031238556, 0.37825554609298706, 0.37996187806129456, 0.3816758692264557, 0.3833976089954376, 0.38512712717056274, 0.38686442375183105, 0.3886095881462097, 0.39036259055137634, 0.3921235203742981, 0.393892377614975, 0.39566925168037415, 0.3974541127681732, 0.39924702048301697, 0.40104803442955017, 0.4028571546077728, 0.4046744406223297, 0.4064999222755432, 0.4083336591720581, 0.4101756513118744, 0.41202595829963684, 0.41388460993766785, 0.4157516360282898, 0.41762709617614746, 0.41951099038124084, 0.4214034080505371, 0.42330437898635864, 0.42521390318870544, 0.4271320402622223, 0.42905882000923157, 0.43099430203437805, 0.4329385459423065, 0.4348915219306946, 0.4368533194065094, 0.43882396817207336, 0.44080349802970886, 0.44279196858406067, 0.44478940963745117, 0.44679585099220276, 0.4488113522529602, 0.4508359432220459, 0.4528696537017822, 0.45491254329681396, 0.4569646716117859, 0.459026038646698, 0.46109670400619507, 0.4631766974925995, 0.46526607871055603, 0.4673649072647095, 0.4694731831550598, 0.4715909957885742, 0.4737183451652527, 0.47585529088974, 0.4780018627643585, 0.48015812039375305, 0.48232412338256836, 0.48449990153312683, 0.48668545484542847, 0.4888809025287628, 0.4910862445831299, 0.49330154061317444, 0.49552682042121887, 0.49776214361190796, 0.5000075697898865, 0.502263069152832, 0.504528820514679, 0.5068047046661377, 0.5090909004211426, 0.5113874077796936, 0.5136942863464355, 0.5160115957260132, 0.5183393359184265, 0.5206775665283203, 0.5230262875556946, 0.5253856778144836, 0.5277556777000427, 0.5301364064216614, 0.5325278639793396, 0.5349301099777222, 0.5373431444168091, 0.5397671461105347, 0.5422019958496094, 0.5446478724479675, 0.5471047759056091, 0.549572765827179, 0.5520519018173218, 0.5545421838760376, 0.557043731212616, 0.5595566034317017, 0.5620807409286499, 0.5646162629127502, 0.5671632885932922, 0.5697217583656311, 0.5722917318344116, 0.5748733878135681, 0.577466607093811, 0.5800715684890747, 0.5826882719993591, 0.5853167772293091, 0.5879571437835693, 0.5906094312667847, 0.5932736992835999, 0.5959499478340149, 0.5986382365226746, 0.6013387441635132, 0.6040513515472412, 0.606776237487793, 0.6095134019851685, 0.6122629046440125, 0.6150248646736145, 0.6177992224693298, 0.620586097240448, 0.6233855485916138, 0.6261976957321167, 0.6290224194526672, 0.6318599581718445, 0.6347103118896484, 0.6375734806060791, 0.640449583530426, 0.6433386206626892, 0.6462407112121582, 0.6491559147834778, 0.6520842909812927, 0.655025839805603, 0.6579806208610535, 0.6609488129615784, 0.663930356502533, 0.666925311088562, 0.6699338555335999, 0.6729559302330017, 0.6759915947914124, 0.6790410280227661, 0.6821041703224182, 0.6851811408996582, 0.6882719993591309, 0.691376805305481, 0.6944956183433533, 0.6976284384727478, 0.7007754445075989, 0.7039366364479065, 0.7071121335029602, 0.71030193567276, 0.7135061025619507, 0.716724693775177, 0.7199578285217285, 0.72320556640625, 0.7264679670333862, 0.729745090007782, 0.7330369353294373, 0.7363436818122864, 0.7396653294563293, 0.7430019378662109, 0.7463536262512207, 0.7497204542160034, 0.7531024217605591, 0.7564996480941772, 0.7599122524261475, 0.7633402347564697, 0.7667836546897888, 0.7702426314353943, 0.7737171649932861, 0.7772074341773987, 0.7807133793830872, 0.7842351794242859, 0.7877728939056396, 0.7913265228271484, 0.7948961853981018, 0.7984820008277893, 0.8020839095115662, 0.8057021498680115, 0.8093366622924805, 0.8129875659942627, 0.8166549801826477, 0.8203389048576355, 0.8240394592285156, 0.8277567028999329, 0.831490695476532, 0.8352415561676025, 0.8390093445777893, 0.8427941203117371, 0.8465959429740906, 0.8504149317741394, 0.8542511463165283, 0.8581047058105469, 0.8619756102561951, 0.8658639788627625, 0.8697698712348938, 0.8736934065818787, 0.8776346445083618, 0.8815937042236328, 0.8855705261230469, 0.8895653486251831, 0.8935781717300415, 0.8976091146469116, 0.9016582369804382, 0.9057255983352661, 0.9098113775253296, 0.9139155149459839, 0.9180381894111633, 0.9221794605255127, 0.9263393878936768, 0.9305181503295898, 0.9347156882286072, 0.9389321804046631, 0.9431677460670471, 0.9474223852157593, 0.9516961574554443, 0.9559893012046814, 0.9603017568588257, 0.9646337032318115, 0.9689851403236389, 0.9733562469482422, 0.9777470231056213, 0.9821576476097107, 0.986588180065155, 0.9910386800765991, 0.9955092668533325, 1.0};

/*
 * Print parameters for debugging
 */

int PrintParameters(WorldParameters *world_parameters){

	FILE * pFile;
	int n;
	char name [500];

	pFile = fopen ("test.hts.bap","w");
	for (int i = 0; i < world_parameters->f0_length; ++i) {
		for (int j = 0; j < world_parameters->fft_size / 2 ; ++j){
			fprintf(pFile,"%f ",world_parameters->aperiodicity[i][j]);
			//printf("%f\n",world_parameters.aperiodicity[i][j]);
		}
		fprintf(pFile,"%f\n",world_parameters->aperiodicity[i][world_parameters->fft_size / 2]);
	}
	fclose (pFile);
	pFile = fopen ("test.hts.sp","w");
	for (int i = 0; i < world_parameters->f0_length; ++i) {
		for (int j = 0; j < world_parameters->fft_size / 2 ; ++j){
			fprintf(pFile,"%f ",world_parameters->spectrogram[i][j]);
			//printf("%f\n",world_parameters.aperiodicity[i][j]);
		}
		fprintf(pFile,"%f\n",world_parameters->spectrogram[i][world_parameters->fft_size / 2]);
	}
	fclose (pFile);
	pFile = fopen ("test.hts.f0","w");
	for (int i = 0; i < world_parameters->f0_length; ++i) {
		fprintf(pFile,"%f\n",world_parameters->f0[i]);
		//printf("%f\n",world_parameters.aperiodicity[i][j]);
	}
	fclose (pFile);

	return 0;

}

/*
 * From WORLD code
 */
void WaveformSynthesis(WorldParameters *world_parameters, int fs,
    int y_length, double *y) {

	// Synthesis by the aperiodicity
   printf("\nSynthesis start\n");

	Synthesis(world_parameters->f0, world_parameters->f0_length,
      world_parameters->spectrogram, world_parameters->aperiodicity,
      world_parameters->fft_size, world_parameters->frame_period, fs,
      y_length, y);

	printf("\nSynthesis done\n");


}

/*
 * From WORLD code
 */
void WaveformSynthesis2(WorldParameters *world_parameters, int fs,
  int y_length, double *y) {
 // DWORD elapsed_time;
  printf("\nSynthesis 2 (All frames are added at the same time)\n");
  //elapsed_time = timeGetTime();

  WorldSynthesizer synthesizer = { 0 };
  int buffer_size = 64;
  InitializeSynthesizer(world_parameters->fs, world_parameters->frame_period,
      world_parameters->fft_size, buffer_size, 1, &synthesizer);

  // All parameters are added at the same time.
  AddParameters(world_parameters->f0, world_parameters->f0_length,
      world_parameters->spectrogram, world_parameters->aperiodicity,
      &synthesizer);

  int index;
  for (int i = 0; Synthesis2(&synthesizer) != 0; ++i) {
    index = i * buffer_size;
    for (int j = 0; j < buffer_size; ++j)
      y[j + index] = synthesizer.buffer[j];
  }

  //printf("WORLD: %d [msec]\n", timeGetTime() - elapsed_time);
  DestroySynthesizer(&synthesizer);
}


/*
 * From WORLD code
 */
void WaveformSynthesis3(WorldParameters *world_parameters, int fs,
    int y_length, double *y) {
  //DWORD elapsed_time;
  // Synthesis by the aperiodicity
  printf("\nSynthesis 3 (Ring buffer is efficiently used.)\n");
 // elapsed_time = timeGetTime();

  WorldSynthesizer synthesizer = { 0 };
  int buffer_size = 64;
  InitializeSynthesizer(world_parameters->fs, world_parameters->frame_period,
      world_parameters->fft_size, buffer_size, 100, &synthesizer);

  int offset = 0;
  int index = 0;
  for (int i = 0; i < world_parameters->f0_length;) {
    // Add one frame (i shows the frame index that should be added)
    if (AddParameters(&world_parameters->f0[i], 1,
      &world_parameters->spectrogram[i], &world_parameters->aperiodicity[i],
      &synthesizer) == 1) ++i;

    // Synthesize speech with length of buffer_size sample.
    // It is repeated until the function returns 0
    // (it suggests that the synthesizer cannot generate speech).
    while (Synthesis2(&synthesizer) != 0) {
      index = offset * buffer_size;
      for (int j = 0; j < buffer_size; ++j)
        y[j + index] = synthesizer.buffer[j];
      offset++;
    }

    // Check the "Lock" (Please see synthesisrealtime.h)
    if (IsLocked(&synthesizer) == 1) {
      printf("Locked!\n");
      break;
    }
  }

  //printf("WORLD: %d [msec]\n", timeGetTime() - elapsed_time);
  DestroySynthesizer(&synthesizer);
}

int DestroyMemory() {

	delete[] world_parameters.time_axis;
	delete[] world_parameters.f0;
	delete[] world_parameters.mgc;
	delete[] world_parameters.spec;
	delete[] world_parameters.imag;

	for (int i = 0; i < world_parameters.f0_length; ++i) {
		delete[] world_parameters.spectrogram[i];
	    delete[] world_parameters.aperiodicity[i];
	  }

	delete[] world_parameters.spectrogram;
	delete[] world_parameters.aperiodicity;
    return 0;

}


/*
 * Synthesis as in merlin with synth program and copy_synthesis.sh.
 * Analysis part of training script must match analysis part in copy_synthesis.sh.
 */

int synthesizeWorld(HTS_GStreamSet * gss, int fs,size_t fperiod, double alpha) {
	bool isOne = false;
	int debug = 0;
    // You must set fs and frame_period before analysis/synthesis.
    world_parameters.fs = fs;
    // 5.0 ms is the default value.
    // Generally, the inverse of the lowest F0 of speech is the best.
    // However, the more elapsed time is required.
    world_parameters.frame_period = ((double)fperiod/fs)*1000;


    CheapTrickOption option = {0};
    // This value may be better one for HMM speech synthesis.
    // Default value is -0.09.
    option.q1 = -0.15;
    // Important notice (2016/02/02)
    // You can control a parameter used for the lowest F0 in speech.
    // You must not set the f0_floor to 0.
    // It will cause a fatal error because fft_size indicates the infinity.
    // You must not change the f0_floor after memory allocation.
    // You should check the fft_size before excucing the analysis/synthesis.
    // The default value (71.0) is strongly recommended.
    // On the other hand, setting the lowest F0 of speech is a good choice
    // to reduce the fft_size.
    option.f0_floor = 71.0;
    // Parameters setting and memory allocation.
    world_parameters.fft_size =
        GetFFTSizeForCheapTrick(world_parameters.fs, &option);
    int specsize=(world_parameters.fft_size / 2 + 1);

    //Copy HTS_GStreamSet parameters to world_parameters
    int mgcdim=gss->gstream[0].vector_length-1;
    int lf0dim=gss->gstream[1].vector_length;
    int bapnum=gss->gstream[2].vector_length;

    printf("%f frame period in ms\n",world_parameters.frame_period);  //MGC
    printf("%d fs\n",fs);  //MGC
    printf("%lu lusamples\n",gss->total_nsample);  //MGC
    printf("%d fft size\n",world_parameters.fft_size);  //MGC
    printf("%d spec size\n",specsize);  //MGC
    printf("%d MGC values\n",mgcdim);  //MGC
    printf("%d LF0 value\n",lf0dim); //LF0
    printf("%d BAP values\n",bapnum); //BAP
    printf("%lu number of frames\n",gss->total_frame); //BAP
    printf("%f alpha\n",alpha); //BAP


    //Allocate F0 array
    world_parameters.f0 = new double[gss->total_frame];
    world_parameters.time_axis = new double[gss->total_frame];
    world_parameters.f0_length=gss->total_frame;

    int i;
    //Convert LogFO to F0
    for (i = 0; i < world_parameters.f0_length; ++i){
    	world_parameters.f0[i] = exp(gss->gstream[1].par[i][0]);
    	//printf("%f\n",world_parameters.f0[i]);
    }
    //Set negative values to 0.0
    for (i = 0; i < world_parameters.f0_length; ++i){
    	if(world_parameters.f0[i] <= 0.0){
    		world_parameters.f0[i] = 0.0;
    	} else {
    		//world_parameters.f0[i] += 440.0;
    	}
	//printf("f0[%d]: %lf\n", i, world_parameters.f0[i]);
    }

    //Arrays to convert mgc to spectrum using SPTK function mgc2sp
    world_parameters.spec =  new double[world_parameters.fft_size];
    world_parameters.imag =  new double[world_parameters.fft_size];
    world_parameters.mgc = new double[mgcdim+1];

    //Allocate spectrogram matrix
    world_parameters.spectrogram = new double *[world_parameters.f0_length];
    for (int i = 0; i < world_parameters.f0_length; ++i)
         world_parameters.spectrogram[i] = new double[specsize];

    //Copy mgc values from gstream
    isOne = false;
    for (int i = 0; i < world_parameters.f0_length; ++i){
    	//if(i == 939) isOne = true;
    	if(isOne) printf("[");
    	for (int j = 0; j < mgcdim + 1; ++j){
    		//load one frame into mgc array
    		world_parameters.mgc[j] = gss->gstream[0].par[i][j];
    		// printf("%f\n",gss->gstream[0].par[i][j]);
    		}
    	//convert mgc frame to spectrum
    	mgc2sp(world_parameters.mgc, mgcdim, alpha, 0.0, world_parameters.spec, world_parameters.imag, world_parameters.fft_size / 2);
    	//copy spectrum to half side spectrum
    	for (int j = 0; j < specsize;j ++){
    		if(j <= specsize / 2)
    			world_parameters.spectrogram[i][j] = MIN(0.999999, pow(exp(world_parameters.spec[j]) / 32768.0,2.0));
    		else
    			world_parameters.spectrogram[i][j] = 0;
    		//printf("%f\n",world_parameters.spectrogram[i][j]);
    		if(isOne){
    			if(j != world_parameters.fft_size / 2) printf("%lf, ", world_parameters.spectrogram[i][j]);
    			else printf("%lf]\n", world_parameters.spectrogram[i][j]);
    		}
    	}
    	isOne = false;
    }

    // Copy coarse aperiodicities
    double **coarse_aperiodicities = new double *[world_parameters.f0_length];
    world_parameters.aperiodicity = new double *[world_parameters.f0_length];

    for (int i = 0; i < world_parameters.f0_length; ++i) {
        world_parameters.aperiodicity[i] = new double[specsize];
        coarse_aperiodicities[i]  = new double[bapnum];
      }

    //Copy gstream into coarse aperiodicities
    for (int i = 0; i < world_parameters.f0_length; ++i){
    	for (int j = 0; j < bapnum; ++j){
    		coarse_aperiodicities[i][j] = gss->gstream[2].par[i][j] / 32768.0;
    	}
    }
    // convert bandaps to full aperiodic spectrum by interpolation (originally in d4c extraction):
    // Linear interpolation to convert the coarse aperiodicity into its
    // spectral representation.

    // -- for interpolating --
    double *coarse_aperiodicity = new double[bapnum + 2];
    coarse_aperiodicity[0] = -60.0;
    coarse_aperiodicity[bapnum + 1] = 0.0;
    double *coarse_frequency_axis = new double[bapnum + 2];

    for (int i = 0; i <= bapnum; ++i)
    	coarse_frequency_axis[i] = static_cast<double>(i) * 3000.0;

    coarse_frequency_axis[bapnum + 1] = fs / 2.0;
    double *frequency_axis = new double[specsize];

    for (int i = 0; i <= world_parameters.fft_size / 2; ++i)
    	frequency_axis[i] = static_cast<double>(i) * fs / world_parameters.fft_size;
	bool unvoiced = false;
    for (int i = 0; i < world_parameters.f0_length; ++i) {
    	if(world_parameters.f0[i] < 55.0){
    		//printf("unvoiced: %d\n", i);
    		unvoiced = true;
    	} else {
    		unvoiced = false;
    	}
    	// load band ap values for this frame into  coarse_aperiodicity
    	/*for (int k = 0; k < bapnum; ++k) {
    		coarse_aperiodicity[k+1] = coarse_aperiodicities[i][k];
    	}
    	interp1(coarse_frequency_axis, coarse_aperiodicity, bapnum + 2,
    			frequency_axis, specsize, world_parameters.aperiodicity[i]);*/
    	//mgc2sp(coarse_aperiodicity, bapnum, alpha, 0.0, world_parameters.aperiodicity[i], world_parameters.imag, world_parameters.fft_size);
    	for (int j = 0; j <= world_parameters.fft_size / 2; ++j){
    		if(unvoiced) world_parameters.aperiodicity[i][j] = 0.999999;
    		else world_parameters.aperiodicity[i][j] = baseap[j];
    		/*world_parameters.aperiodicity[i][j] = pow(10.0, world_parameters.aperiodicity[i][j] / 20.0) - 0.000001;*/
    		/*if(isOne){
    			if(j != world_parameters.fft_size / 2) printf("%lf, ", world_parameters.aperiodicity[i][j]);
    			else printf("%lf]\n", world_parameters.aperiodicity[i][j]);
    		}*/
    	}
    	isOne = false;
    }

    //Allocate output vector
    int y_length = ((world_parameters.f0_length - 1) *
    		fperiod) + 1;
    double *y = new double[y_length];


    //PrintParameters(&world_parameters);

    WaveformSynthesis3(&world_parameters, fs, y_length, gss->gspeech);

    int16_t tmp_signal;
    for (int i = 0; i < y_length; ++i) {
    	tmp_signal = static_cast<int16_t>(MyMaxInt(-32768,
    			MyMinInt(32767, static_cast<int>(gss->gspeech[i] * 32767))));
    	gss->gspeech[i]=tmp_signal;
    }

    for (int i=0; i<world_parameters.f0_length; i++){
    	delete[] coarse_aperiodicities[i];
    }
    delete[] coarse_aperiodicities;
    delete[] coarse_aperiodicity;
    delete[] frequency_axis;

    printf("complete.\n");
    return 0;

}

SYNTHWORLD_C_END;

#endif                       /* !HTS_GSTREAM_C */

